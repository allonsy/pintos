       	 +-------------------------+
		     |		     CS 230          |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Alec Snyder <alsnyder@uchicago.edu>
Alejandro Younger <acy1@uchicago.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

I talked with Professor Gunawi and given that my partner graduated a week early, 
he agreed to give me a little point boost where my final p4 grade is my actual
p4 grade times (4/3). 

Currently, caching works and directories mostly function. I was unable to get
file extensibility to debug well so it is included at the bottom of inode.c and cache.c but
commented out. In this document I will refer to this commented out implementation in regards
to file extension.




overall, I EXPECT TO RECEIVE AS A GRADE:
Actual: 55.56 on the tests + 10 for design doc = 65.56
Adjusted: 65.56 * (4/3) = 87.41%





>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* note: these are from the framework commented out due to failing tests */

struct inode 
  {
    struct list_elem elem;              /* Element in inode list. */
    block_sector_t sector;              /* Sector number of disk location. */
    int open_cnt;                       /* Number of openers. */
    bool removed;                       /* True if deleted, false otherwise. */
    struct lock lock;                   /* Protects the inode. */

    /* Denying writes. */
    struct lock deny_write_lock;        /* Protects members below. */
    struct condition no_writers_cond;   /* Signaled when no writers. */ 
    int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
    int writer_cnt;                     /* Number of writers. */
  };

  struct inode_disk
  {
    block_sector_t sectors[SECTOR_CNT]; /* sectors. (123 direct, 1 indirect, 1 doubly indirect)*/
    enum inode_type type;               /* FILE_INODE or DIR_INODE. */
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
  };

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

With the extensibility code included, we support 123 direct blocks, 
1 indirect block and 1 doubly indirect block which leads to:
123 + (128 * 1) + (128 * 128) = 16635 block. 
Then, each block can support 512 bytes so we have a max file size of:
16635 * 512 = 8517120 = 8.5MB


---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

We have read/write locks in our cache. Therefore, if two processes need to 
extend the file, they need to acquire the write lock first which guarantees
mutual exclusion.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

Writers are only allowed to proceed with a write until there are no more
readers. Likewise, readers aren't allowed to proceed if there are writers
Therefore, our design avoids this by using this mutual reader/writer exclusion.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

The most common case of fairness is readers hogging a file and preventing
a writer from writing. Therefore, whenever a writer enters the queue, we
allow all readers to finish but prevent new readers from entering.
Then, after a single writer is done, we hand control back to all the readers.
This way, the writers can't hog the file either.  

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

For our multilevel inodes (in the commented out code), we have a multilevel index.
We have 123 direct blocks so that small files can quickly access their data blocks.
We also have 1 indirect for medium files and and additional doubly indirect block. 
Together, this offers speed for small files, eliminates external fragmentation by
allocating one block at a time, and offers larger file sizes up to 8.5 MB. 

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


/* Added to thread.c */

struct thread
{
  ...
  struct inode *current_dir; // pointer to the current thread's working dir
  ...
}

/* From inode.c */

struct inode_disk
{
  ...
  enum inode_type type;               /* FILE_INODE or DIR_INODE. */
  ...
}

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

Given an absolute path, we break it up into directories. For each level 
(starting at root), we open up the directory, find the inode of the next 
directory, and repeat until we are left with the last part of the path 
or the next hop is not found in the previous directory. 

If we have a relative path, we grab the stored inode for the current
thread's working directory and start the process at that inode instead of
at the root.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

Access to reading and writing directories is managed via the cache
and thus includes the same synchronization primitives as our cache.
When files are removed from the directory, this is a write and is therefore
guaranteed to be mutually exclusive by the cache system (as specified in
the buffer cache of this document).

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

If a directory is owned by a process, that directory may be removed by another
process. If a process's cwd is removed, then any future access will default
to the root directory as the cwd.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

Representing it as an inode gives us direct access to the directory's
data blocks. While struct dir *'s may be open and closed, the inode will
always give us access to the directory's sector number for access.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Type of block lock. */
enum lock_type 
  {
    NON_EXCLUSIVE,	/* Any number of lockers. */
    EXCLUSIVE		/* Only one locker. */
  };

  /* this comment added for commit reasons */


 struct cache_block 
  {
    struct lock block_lock;
    struct condition no_readers_or_writers; /* for signalling a waiting writer */
    struct condition no_writers;            /* for signalling readers waiting on writers */     
    int readers, read_waiters;				/* protected by block_lock, the number of readers or waiters */
    int writers, write_waiters;				/* protected by block_lock, the number of writers or waiters */
    block_sector_t sector;					/* the block sector currently in this cache segment */
    bool up_to_date;						/* is this segment up to date with the disk? */
    bool dirty;								/* has this segment been written to? */
    bool is_free;							/* for cache eviction policies */
    struct lock data_lock; 					/* protects data */
    uint8_t data[BLOCK_SECTOR_SIZE];   		/* actual data */
  };

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

In our file extension code we have an LRU with second chance. 
It iterates through the cache (starting at hand) until it finds a block with no
readers and writers and evicts it. If we go through everything and see no blocks
without readers or writers, we acquire a lock to the first block we find and wait until are
readers and writers leave before evicting.

>> C3: Describe your implementation of write-behind.

information is stored in the data portion of the cache block in memory. If we evict
that block or the cache is flushed, we write it back to the disk to the sector
pointed to by cache_block->sector if it is dirty.

>> C4: Describe your implementation of read-ahead.

We did not implement read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

When we want to evict a block, we hold on to the reader and writer locks
and cache_sync so that no new readers/writers can wait for this block until
eviction is complete. Then, we wait until all readers and writers are finished
before proceeding with eviction.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

We hold onto the cache_sync lock during eviction so no other process
can find this block until we are done.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Workloads with lots of quick reads and writes, like work document editing
where the student presses save many times in a short span will benefit from
buffer caching and write behind since the writes aren't committed to disk
every single time.

Read ahead favors workloads with many sequential accesses, such as watching movies.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

I think that the file extension and directory portions were quite interesting
and elightening although challenging. 
However, I felt that the cache portion was complex without
giving us exposure to newer concepts (we dealt with cache like structures already
in p3) which made it feel a little unnecessary. 

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Certainly working on file extension gave me a new appreciation for
how easy it seems to be to add bytes to a file while in reality, it can
be quite complicated. It was also neat to see how directories are stored
on disk as they are a critical part of any filesystem.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I would say that some of the structure elements in the code provided
were a little vague on their purpose and I would have liked to see
a little more information on how we were supposed to use them.

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?

I had a great time in this class and I certainly have a much greater
appreciation for all the basic computer operations that seem so effortless
but are actually quite complex. 